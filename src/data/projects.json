[
  {
    "background": "./img/gm/bg.png",
    "hook": "Want to try a cool game?",
    "logo": "./img/gm/title.png",
    "description": "Geometric Meltdown is a 2D, multiplayer, fighter. The objective is to knock opponents off the stage. The higher the damage, the further they fly. This game currently runs on both Windows and Linux Platforms. This version of the game was redesigned to focus on optimization, sound object-oriented design, and adaptability.",
    "dropdown": {
      "title":"Downloads and Links",
      "color":"danger"
    },
    "buttons": [
      {
        "url":"https://github.com/eortiz16/geomelt_sflw/releases/download/0.1/GeoMelt_Windows.zip",
        "title": "Download for Windows"
      },
      {
        "url":"https://github.com/eortiz16/geomelt_sflw/releases/download/0.1/geomelt_linux.zip",
        "title":"Download for Linux"
      },
      {
        "url":"https://github.com/eortiz16/geomelt_sflw",
        "title":"Checkout the Source Code"
      }
    ],
    "images": ["/img/gm/1.png", "/img/gm/2.gif", "img/gm/3.png"]
  },
  {
    "background": "./img/mm/bg.png",
    "hook": "The Meltdown Series",
    "logo": "./img/mm/title.png",
    "description": "Medical Meltdown is the predecessor to Geometric Meltdown. This video game began as a class project. This version is complete and only runs on Linux Platforms. This version of the game earned my team and I the Best Video Game Award at CSUB in the Spring of 2017.",
    "dropdown": {
      "title":"Downloads and Links",
      "color":"danger"
    },
    "buttons": [
      {
        "url":"https://github.com/cnuno/medMelt/releases/download/1.0/medMelt.zip",
        "title":"Download for Linux"
      },
      {
        "url":"https://github.com/cnuno/medMelt",
        "title":"Checkout the Source Code"
      }
    ],
    "images": ["/img/mm/1.png", "/img/mm/2.jpg", "img/mm/3.png"]
  },
  {
    "background": "./img/ggg/bg.jpg",
    "hook": "Want to discover cool new places?",
    "logo": "./img/ggg/title.png",
    "description": "GoGoGatchi is an app built for Android devices. This app aims to inform travellers of locations with rich historical and cultural locations. Since this was a group effort, I helped with the development of the GUI, RESTful API, and the overall user experience.",
    "dropdown": {
      "title":"Downloads and Links",
      "color":"primary"
    },
    "buttons": [
      {
        "url":"https://github.com/BruteForceNoob/GoGoGatchi/releases/download/1.0/gogogatchi.apk",
        "title":"Download APK"
      },
      {
        "url":"https://github.com/BruteForceNoob/GoGoGatchi",
        "title":"Checkout the Sourcecode"
      },
      {
        "url":"downloads/Prototype_GoGoGatchi_Final.bmpr",
        "title":"Download Prototype (Balsamiq Mockups)"
      },
      {
        "url":"downloads/GoGoGatchi_Portfolio_First_Presentation.pptx",
        "title":"Download First Presentation"
      },
      {
        "url":"downloads/GoGoGatchi_Portfolio_Final_Presentation.pptx",
        "title":"Download Final Presntation"
      }
    ],
    "images": ["/img/ggg/1.png", "/img/ggg/2.png", "img/ggg/3.png"]
  },
  {
    "background": "./img/se/bg.jpg",
    "hook": "How do Search Engines Work?",
    "logo": "./img/se/title.png",
    "description": "This project is rooted in the principles of object-oriented design. The main features of this software project include: Boolean query parser, ranked retrieval, disk positional index, byte-encoding, and precision-recall evaluation. Additionally, this project aims to resolve the authorship of the contested Federalist Papers via Rocchio and Naive Bayes Classification. This project was designed in the name of scalability and adaptability (via plugins) to a multitude of corpora. Currently, this software is tuned to parse .txt, .json, and files in a given directory. ",
    "dropdown": {
      "title":"Downloads and Links",
      "color":"danger"
    },
    "buttons": [
      {
        "url":"downloads/Search_Engine_Presentation.pptx",
        "title":"Download Presenation"
      },
      {
        "url":"downloads/Search_Engine_Paper.pdf",
        "title":"Download Paper"
      },
      {
        "url":"downloads/SearchEngine-master.zip",
        "title":"Checkout the Sourcecode"
      }
    ],
    "images": ["/img/se/1.jpg", "/img/se/2.jpg", "img/se/3.jpg"]
  },
  {
    "background": "./img/k/bg.jpg",
    "hook": "Coordinating Distributed Bots",
    "logo": "./img/k/title.png",
    "description": "This project was a collaborative effort and was developed in C. Essentially this software coordinates autonomous and asynchronous Kilobots. This software coordinates the bots which can only move left, right and forward and have the ability to display color via an onboard LED. We implemented leader election, the coloring algorithm, and broadcast communication to obtain a ferris wheel pattern. This software uses Kilombo to simulate Kilobot behavior and can also be compiled for use on actual hardware. ",
    "dropdown": {
      "title":"Downloads and Links",
      "color":"warning"
    },
    "buttons": [
      {
        "url":"downloads/kilobot_presentation.pptx",
        "title":"Download Presenation"
      },
      {
        "url":"downloads/kilobot_paper.pdf",
        "title":"Download Paper"
      },
      {
        "url":"downloads/kilobot_pattern_master.zip",
        "title":"Checkout the Sourcecode"
      }
    ],
    "images": ["/img/k/1.png", "/img/k/2.gif", "img/k/3.png"]
  },
  {
    "background": "./img/mm2/bg.jpg",
    "hook": "Want to check out my writing proficiency?",
    "logo": "./img/mm2/title.png",
    "description": "This is a technical writing sample which explains the real-time distributed MIMO system, MEGAMIMO 2.0, developed by researchers at the Computer Science and Artificial Intelligence Laboratory at the Massachusetts Institute of Technology. ",
    "dropdown": {
      "title":"Downloads and Links",
      "color":"primary"
    },
    "buttons": [
      {
        "url":"downloads/megamimo2_presentation.pptx",
        "title":"Download Presenation"
      },
      {
        "url":"downloads/megamimo2_paper.pdf",
        "title":"Download Paper"
      }
    ],
    "images": []
  },
  {
    "background": "./img/oa/bg.jpg",
    "hook": "Designing a Relational Database",
    "logo": "./img/oa/title.png",
    "description": "I developed a subset of artifacts as prescribed by the Artefact-based Approach to Requirements Engineering, or the AMDIRE model. This effort was team based and focuses on a software project, named One Athlete. This proposed projects aims to make the electronic medical files of athletes portable. ",
    "dropdown": {
      "title":"Downloads and Links",
      "color":"success"
    },
    "buttons": [
      {
        "url":"downloads/OA_Requirements.pdf",
        "title":"Download Documentation"
      }
    ],
    "images": []
  },
  {
    "background": "./img/ca/bg.jpg",
    "hook": "Designing a Relational Database",
    "logo": "./img/ca/title.png",
    "description": "Collaboratively, I developed the design for a relational database for a hypothetical financial aid company. The documentation of the design spans over 150+ pages of detailed specification. In particular the fact finding techniques, conceptual database design, conceptual database, logical database, Entity Relationship Model, Relational Model, Relational Algebra, Tuple Relational Calculus, Domain Relational Calculus, were specified. Further we deployed our database using the following technologies: SQL *PLUS, Oracle DBMS, Oracle PL/SQL, Microsoft SQL Server, MySQL. Finally, we built two front end applications to interface with our database. We used Python, Django, PHP, and other web technologies.",
    "dropdown": {
      "title":"Downloads and Links",
      "color":"warning"
    },
    "buttons": [
      {
        "url":"downloads/CaliforniaAid_Database.pdf",
        "title":"Download Documentation"
      }
    ],
    "images": []
  }
]
